import { useEffect } from "react";
import Sketch from "react-p5";


let z = 0;
let p = [];
let subdivs = 42;
let speed = 0;
let maxSpeed = 2;
let speedRamp = 1.005;
let scl = 200;
let logoscl = 1;
let bias = [0, 0];
let offset = [0, 0];
let aspect = [1, 1];
var cnv;


export function Terrain({ props }) {

  function curl(p5, vx, vy) {
    var eps = 0.0001;
    let x = vx;
    let y = vy;

    //Find rate of change in X direction
    var n1 = p5.noise(x + eps, y);
    var n2 = p5.noise(x - eps, y);

    //Average to find approximate derivative
    var a = (n1 - n2) / (2 * eps);

    //Find rate of change in Y direction
    var n1 = p5.noise(x, y + eps);
    var n2 = p5.noise(x, y - eps);

    //Average to find approximate derivative
    var b = (n1 - n2) / (2 * eps);

    //Curl
    return [b, -a];
  }

  function populateLogo(w,h,subdivs){
    p = [[18,161],[18,162],[19,155],[19,156],[19,157],[19,158],[19,159],[19,160],[19,163],[19,164],[19,165],[19,166],[20,153],[20,154],[20,167],[20,168],[21,152],[21,169],[22,151],[22,170],[23,150],[23,171],[24,149],[24,172],[25,149],[25,172],[26,148],[26,173],[27,148],[27,173],[28,147],[28,174],[29,147],[29,174],[30,147],[30,174],[31,147],[31,174],[32,147],[32,175],[33,147],[33,166],[33,175],[34,147],[34,166],[34,175],[35,148],[35,165],[35,166],[35,175],[36,148],[36,164],[36,166],[36,175],[37,149],[37,163],[37,166],[37,175],[38,150],[38,162],[38,166],[38,175],[39,151],[39,152],[39,159],[39,160],[39,161],[39,165],[39,175],[40,153],[40,154],[40,155],[40,156],[40,157],[40,158],[40,164],[40,174],[41,162],[41,163],[41,174],[42,159],[42,160],[42,161],[42,174],[43,61],[43,62],[43,63],[43,64],[43,65],[43,66],[43,67],[43,156],[43,157],[43,158],[43,173],[44,60],[44,68],[44,152],[44,153],[44,154],[44,155],[44,172],[45,59],[45,68],[45,147],[45,148],[45,149],[45,150],[45,151],[45,172],[46,58],[46,68],[46,142],[46,143],[46,144],[46,145],[46,146],[46,171],[47,58],[47,68],[47,137],[47,138],[47,139],[47,140],[47,141],[47,170],[48,58],[48,68],[48,132],[48,133],[48,134],[48,135],[48,136],[48,170],[49,58],[49,68],[49,127],[49,128],[49,129],[49,130],[49,131],[49,169],[50,58],[50,68],[50,122],[50,123],[50,124],[50,125],[50,126],[50,168],[51,58],[51,68],[51,117],[51,118],[51,119],[51,120],[51,121],[51,166],[51,167],[52,58],[52,68],[52,111],[52,112],[52,113],[52,114],[52,115],[52,116],[52,165],[53,58],[53,68],[53,106],[53,107],[53,108],[53,109],[53,110],[53,164],[54,58],[54,68],[54,101],[54,102],[54,103],[54,104],[54,105],[54,162],[54,163],[55,58],[55,68],[55,96],[55,97],[55,98],[55,99],[55,100],[55,161],[56,58],[56,68],[56,91],[56,92],[56,93],[56,94],[56,95],[56,159],[56,160],[57,58],[57,68],[57,85],[57,86],[57,87],[57,88],[57,89],[57,90],[57,157],[57,158],[58,58],[58,68],[58,80],[58,81],[58,82],[58,83],[58,84],[58,155],[58,156],[59,58],[59,68],[59,75],[59,76],[59,77],[59,78],[59,79],[59,152],[59,153],[59,154],[60,58],[60,68],[60,70],[60,71],[60,72],[60,73],[60,74],[60,150],[60,151],[61,58],[61,68],[61,69],[61,147],[61,148],[61,149],[62,58],[62,143],[62,144],[62,145],[62,146],[63,53],[63,54],[63,55],[63,56],[63,57],[63,58],[63,139],[63,140],[63,141],[63,142],[64,48],[64,49],[64,50],[64,51],[64,52],[64,135],[64,136],[64,137],[64,138],[65,43],[65,44],[65,45],[65,46],[65,47],[65,130],[65,131],[65,132],[65,133],[65,134],[66,38],[66,39],[66,40],[66,41],[66,42],[66,126],[66,127],[66,128],[66,129],[67,35],[67,36],[67,37],[67,121],[67,122],[67,123],[67,124],[67,125],[68,31],[68,32],[68,33],[68,34],[68,116],[68,117],[68,118],[68,119],[68,120],[69,29],[69,30],[69,111],[69,112],[69,113],[69,114],[69,115],[70,26],[70,27],[70,28],[70,106],[70,107],[70,108],[70,109],[70,110],[71,24],[71,25],[71,101],[71,102],[71,103],[71,104],[71,105],[72,22],[72,23],[72,96],[72,97],[72,98],[72,99],[72,100],[73,21],[73,91],[73,92],[73,93],[73,94],[73,95],[74,19],[74,20],[74,86],[74,87],[74,88],[74,89],[74,90],[75,18],[75,81],[75,82],[75,83],[75,84],[75,85],[76,17],[76,75],[76,76],[76,77],[76,78],[76,79],[76,80],[77,16],[77,70],[77,71],[77,72],[77,73],[77,74],[78,15],[78,68],[78,69],[79,14],[79,58],[79,68],[80,13],[80,53],[80,54],[80,55],[80,56],[80,57],[80,58],[80,68],[81,12],[81,48],[81,49],[81,50],[81,51],[81,52],[81,58],[81,68],[82,12],[82,43],[82,44],[82,45],[82,46],[82,47],[82,58],[82,68],[83,11],[83,38],[83,39],[83,40],[83,41],[83,42],[83,58],[83,68],[84,10],[84,32],[84,33],[84,34],[84,35],[84,36],[84,37],[84,58],[84,68],[85,10],[85,28],[85,29],[85,30],[85,31],[85,58],[85,68],[86,10],[86,23],[86,24],[86,25],[86,26],[86,27],[86,58],[86,68],[87,9],[87,21],[87,22],[87,58],[87,68],[88,9],[88,20],[88,58],[88,68],[89,9],[89,19],[89,24],[89,25],[89,26],[89,27],[89,28],[89,29],[89,30],[89,31],[89,32],[89,58],[89,68],[90,9],[90,18],[90,22],[90,23],[90,33],[90,58],[90,68],[91,9],[91,17],[91,21],[91,34],[91,58],[91,68],[92,9],[92,17],[92,20],[92,35],[92,58],[92,68],[93,9],[93,17],[93,19],[93,36],[93,58],[93,68],[94,9],[94,17],[94,18],[94,36],[94,58],[94,68],[95,9],[95,18],[95,36],[95,58],[95,68],[96,9],[96,36],[96,58],[96,68],[97,9],[97,37],[97,58],[97,68],[98,9],[98,37],[98,58],[98,68],[99,9],[99,36],[99,59],[99,67],[100,10],[100,36],[100,59],[100,63],[100,64],[100,65],[100,66],[101,10],[101,36],[101,60],[101,61],[101,62],[102,11],[102,36],[103,11],[103,35],[104,12],[104,35],[105,12],[105,34],[106,13],[106,33],[107,14],[107,32],[108,15],[108,16],[108,31],[109,17],[109,18],[109,28],[109,29],[109,30],[110,19],[110,20],[110,21],[110,22],[110,23],[110,24],[110,25],[110,26],[110,27]];
    for(let i=0; i<p.length; i++){
      p[i][0]*=logoscl;
      p[i][1]*=logoscl;
      p[i][0]+=w/2-60*logoscl;
      p[i][1]+=h/2-90*logoscl;
      p[i].push(p[i][0]);
      p[i].push(p[i][1]);
      p[i].push(Math.random());
    }
  }
  function populatePartRect(w, h,subdivs) {
    for (let y = 0; y < subdivs + 1; y++) {
      for (let x = 0; x < subdivs + 1; x++) {
        let tx = ((x * w) / subdivs) * aspect[0] + offset[0];
        let ty = ((y * h) / subdivs) * aspect[1] + offset[1];
        p.push([tx, ty, tx, ty, Math.random()]);
      }
    }
  }

  function populatePartLineX(w, h) {
    p = [];
    for (let y = 0; y < subdivs + 1; y++) {
      for (let x = 0; x < subdivs + 1; x++) {
        let tx = ((y * subdivs + x * w) / subdivs) * aspect[0] + offset[0];
        let ty = offset[1];
        p.push([tx, ty, tx, ty, Math.random()]);
      }
    }
  }

  function populatePartCircle(w, h, subdivs) {
    for (let r = 0; r < subdivs; r++) {
      for (let a = 0; a < subdivs; a++) {
        let tx =
          Math.cos((a * Math.PI * 2) / subdivs) * ((r * h) / 4/ subdivs) +
          w / 2;
        let ty =
          Math.sin((a * Math.PI * 2) / subdivs) * ((r * h) / 4/ subdivs) +
          h / 2;
        p.push([tx, ty, tx, ty, Math.random()]);
      }
    }
  }

  function populateArray(w, h) {
    //population method
    p=[];
    populateLogo(w,h,subdivs);
  }

  function reset(p5){
    let parent = document.getElementById("p5CanvasParent");
    speed =  0;
    logoscl = Math.min(parent.clientWidth/150,parent.clientHeight/210)
    cnv = p5
      .createCanvas(parent.clientWidth, parent.clientHeight)
      .parent(parent);
    populateArray(p5.width, p5.height);
    z = 0;
  }

  const setup = (p5) => {
    reset(p5);
    
  };

  const resize = (p5) => {
    reset(p5)
  };

  function drawPoints(p5) {
    for (let index = 0; index < p.length; index++) {
      let px = p[index][0];
      let py = p[index][1];
      let tx = p[index][2];
      let ty = p[index][3];

      let col = p5.color(`rgba(216, 208, 207,${z})`);
      if (p[index][4] > 0.5) {
        col = p5.color(`rgba(31, 153, 153,${z})`);
      }

      //display point
      p5.stroke(col);
      p5.point(tx, ty);


      let curlAtPoint = curl(p5, tx / scl, ty / scl);
      //add noise velocity to point
      tx += curlAtPoint[0] * speed + bias[0];
      ty += curlAtPoint[1] * speed + bias[1];
      //handle wraparound
      ty -= p5.map(ty, 0, p5.height, -speed*1.2, speed*1.2);
      tx -= p5.map(tx, 0, p5.width, -speed*1.2, speed*1.2);
      

      //set new values
      p[index][0] = p[index][2];
      p[index][1] = p[index][3];
      p[index][2] = tx;
      p[index][3] = ty;
    }
    if (z < 1) {
      z += 0.01;
    }
    if(speed<maxSpeed){
      speed+=1;
      speed*=speedRamp;
      speed-=1;
    }
  }

  const draw = (p5) => {
    drawPoints(p5);
    if(p5.mouseIsPressed && p5.mouseY>0){
      p.push([p5.mouseX,p5.mouseY,p5.mouseX,p5.mouseY, Math.random()])
    }
  };


  useEffect(() => {}, []);

  return (
    <Sketch
      windowResized={resize}
      setup={setup}
      draw={draw}
    />
  );
}
